- 幾何對象 (`geom`etric)
- 座標尺度 (`scale`)
- 統計轉換 (`stat`istics)
- 座標系統 (`coord`inante)
- 圖層 (layer)
- 刻面 (`facet`)
- 主題 (`theme`)
## ggplot2 基本架構(2)
<center>
<img src='img/ggplot.jpeg' width=550 align='center'></img>
</br>
source: http://goo.gl/Odt2Rs
</center>
## ggplot2 基本語法
```{r echo=TRUE, eval=FALSE}
ggplot(data=..., aes(x=..., y=...)) +
geom_xxx(...) +
stat_xxx(...) +
facet_xxx(...) + ...
```
- `ggplot` 描述 data 從哪來
- `aes` 描述圖上的元素跟 data 之類的對應關係
- `geom_xxx` 描述要畫圖的類型及相關調整的參數
- 常用的類型諸如：`geom_bar`, `geom_line`, `geom_points`, ...
# 圖層概念的實作
## Various functions
```{r}
library(ggplot2)
# list all geom
ls(pattern = '^geom_', env = as.environment('package:ggplot2'))
```
## **注意**
- 使用 `data.frame` 儲存資料 (不可以丟 matrix 物件)
- 使用 `long format` (利用reshape2將資料轉換成 1 row = 1 observation)
</br>
<center>![](img/wide-long.png)</center>
## 馬上來個範例 {data-background="a.jpeg"}
```{r echo=TRUE,fig.width=6,fig.height=3,fig.align='center'}
# 先定義一個資料表
data <- data.frame(身份 = c("大學部","研究所","教授","講師","助教"),
人數 = c(20,15,5,2,3))
# plot
ggplot(data = data, aes(x = 身份, y = 人數)) +
geom_bar(stat = "identity") +
theme_grey(base_family = "STHeiti")
```
# 正片開始
## 首先請先安裝以下套件
- 安裝套件
```{r echo=TRUE, eval=FALSE}
install.packages(c("ggplot2","dplyr","reshape2"),repos="http://cran.csie.ntu.edu.tw/")
```
</br>
- 載入套件
```{r echo=TRUE, eval=FALSE}
library(ggplot2)
library(dplyr)
library(reshape2)
```
</br>
**注意**：下載完套件一定要記得 `library` 才能使用喲！
## 一切從讀檔開始（CSV）
- [課程資料下載](https://ling32342.github.io/2017_NCCU_R/data/transaction.csv)
```{r,eval=FALSE}
############### 絕對路徑 ###############
# 請輸入完整的檔案路徑
data <- read.csv("/Volumes/SD-Lofu/PIXNET_DS_Workshop_EDA_Alger/data/transaction.csv") #如果你是mac
data <- read.csv("C:\\Users\\transaction.csv") #如果你是windows
############### 相對路徑 ###############
# 瞭解現在我們所處在的路徑
getwd()
# 設定我們檔案存放的路徑
setwd()
# 讀檔起手式
data <- read.csv("transaction.csv")
# 若讀入的是亂碼，試試以下
data <- read.csv("transaction.csv",fileEncoding = 'big5')  #如果你是mac
data <- read.csv("transaction.csv",fileEncoding = 'utf-8') #如果你是windows
```
```{r,echo=FALSE}
data <- read.csv("data/transaction.csv") %>% as.data.frame()
data <- data[,-1]
data$trac_month <- factor(data$trac_month)
```
## 資料介紹
```{r, echo=FALSE}
head(data[,sample(1:15,6)],5) %>%
knitr::kable()
```
## 欄位說明
```{r echo = FALSE,fig.height=3, warning=FALSE, fig.align='center', message=FALSE, results='asis'}
data.frame(英文欄位名稱=c("city","district","trac_year","trac_month","trac_type","trac_content",
"use_type","build_type","build_ymd","area_land","area_build",
"area_park","price_total","price_unit"),
中文欄位名稱=c("縣市","鄉鎮市區","交易年份","交易月份","交易標的","交易筆棟數","使用分區或編定",
"建物型態","建築完成年月","土地移轉總面積.平方公尺.","建物移轉總面積.平方公尺.",
"車位移轉總面積.平方公尺.","總價.元.","單價.元.平方公尺.")) -> name
```
<div style='float:left;width:48%;'>
```{r, echo = FALSE}
name[1:7,] %>% knitr::kable()
```
</div>
<div style='float:right;width:50%;'>
```{r, echo = FALSE}
name[8:14,] -> name2
rownames(name2) <- c(1:7)
name2 %>% knitr::kable()
```
</div>
## 以為開始了嗎？
- 進行分析前，先去了解資料的型態與特性
```{r echo=TRUE}
str(data)
```
## 身為資料分析師，一定要有的好習慣！
- 暸解基本的各變數統計量值
```{r echo=TRUE}
summary(data)
```
# 質化 v.s. 量化：Bar Chart
## `geom_bar`
- 先來看看2013年在各縣市的案件交易量
```{r,warning=FALSE,fig.height=3,fig.align='center', message=FALSE}
thm <- function() theme(text=element_text(size = 15, family = "STHeiti")) # 控制字體與大小
# STHeiti是只有Mac才有的字體, 用來解決Mac系統中文顯示錯誤的問題
# Windows系統使用者請忽略 `+ thm()` 指令
data %>%
ggplot(aes(x=city)) + geom_bar(stat = "count") + thm() # stat = "count" 算個數
```
## Change labels !
```{r,warning=FALSE,fig.height=3.5,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=city)) + geom_bar(stat = "count") + thm() +
labs(title="各縣市交易量",x="縣市",y="交易量") # lab用來幫圖形的標題、x軸與y軸做命名
```
## Change colors !
- 顏色調整：`color` vs `fill`?
```{r,warning=FALSE,fig.height=3.5,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=city)) + geom_bar(stat = "count") + thm() +
labs(title="各縣市交易量",x="縣市",y="交易量") +
geom_bar(fill='snow', color='black') # see colors() if you're picky
```
## Bar chart
-  看臺北市各行政區的案件交易量
```{r,warning=FALSE,fig.height=3.5,fig.align='center', message=FALSE}
# 資料整理
table = data %>%
filter(city == "臺北市") %>%
group_by(district) %>%
summarise(amount=n())  # dplyr::n 用來計數
```
## Bar chart
```{r,warning=FALSE,fig.align='center', message=FALSE}
table %>%
ggplot(aes(x=district,y=amount)) +
geom_bar(stat = "identity") + thm() # stat='identity'以表格的值做為bar的高度
```
## Reoder x
```{r ,warning=FALSE,fig.align='center', message=FALSE}
table %>%
ggplot(aes(x=reorder(district,-amount), y=amount)) +
geom_bar(stat='identity') + thm() +
labs(titles = "臺北市各行政區交易量", x = "行政區", y = "案件數")
```
## 小挑戰
- 計算臺北市&高雄市的各使用分區或編定(`use_type`)所佔比例
```{r,echo=FALSE}
table = data %>%
filter(city == "臺北市" | city == "高雄市" ) %>%
group_by(city,use_type) %>%
summarise(amount = n()) %>%
mutate(rate = round(amount/sum(amount),2) )
table
```
## 參考解答
```{r, eval=FALSE}
table = data %>%
filter(city == "臺北市" | city == "高雄市" ) %>%
group_by(city,use_type) %>%
summarise(amount = n()) %>%
mutate(rate = round(amount/sum(amount),2) )
```
<center>
<img src='img/white2.png' width=600 align='center'></img>
</center>
## Grouping：`stack`
```{r,warning=FALSE,fig.align='center', message=FALSE,fig.height=4}
table %>%
ggplot(aes(x = city, y = rate, fill = use_type)) +
geom_bar(stat = 'identity', position = 'stack') + thm() # stack類別堆疊
```
## Grouping：`dodge`
```{r,warning=FALSE,fig.align='center', message=FALSE,fig.height=4}
table %>%
ggplot(aes(x = city, y = rate, fill = use_type)) +
geom_bar(stat = 'identity', position = 'dodge')  + # dodge類別並排
thm() + scale_fill_discrete(name  ="使用分區或編定")  # 設定圖例的顯示
```
# 量化 v.s. 量化：Line Chart
## `geom_line`
- 各月份交易量
```{r,warning=FALSE,fig.align='center', message=FALSE}
table = data %>%
group_by(trac_month) %>%
summarise(amount=n())
table
```
## Line chart
```{r,warning=FALSE,fig.align='center', message=FALSE}
table %>%
ggplot(aes(x=trac_month,y=amount,group=1)) +
geom_line() + thm() + labs(x = "交易月份" , y = "交易數量")
```
## `Multiple` Line
- 各縣市各月份交易量比較
```{r,warning=FALSE,fig.align='center', message=FALSE}
table = data %>%
group_by(city,trac_month) %>%
summarise(amount=n())
table
```
## `Multiple` Line
```{r,warning=FALSE,fig.align='center', message=FALSE}
table %>%
ggplot(aes(x=trac_month,y=amount,group=city,color=city)) +
geom_line() + geom_point() + thm() +
labs(x = "交易月份" , y = "交易數量")
```
## 小挑戰
- 計算臺北市&高雄市不同屋齡的交易量，並畫出 `Multiple` Line plot
- 如下圖：
```{r,echo=FALSE}
data %>%
filter(city == "臺北市" | city == "高雄市" ) %>%
group_by(city,age) %>%
summarise(amount = n()) %>%
ggplot(aes(x=age,y=amount,group=city,color=city)) +
geom_line() + geom_point() + thm()
```
## 參考答案 (有發現什麼問題嗎？！)
```{r,echo=TRUE}
data %>%
filter(city == "臺北市" | city == "高雄市" ) %>%
group_by(city,age) %>%
summarise(amount = n()) %>%
ggplot(aes(x=age,y=amount,group=city,color=city)) +
geom_line() + geom_point() + thm()
```
## 調整 x 軸的 scale 再看一次
- EDA的的價值之一就是找出資料中的不合理
```{r}
data %>%
filter(city == "臺北市" | city == "高雄市" ) %>%
group_by(city,age) %>%
summarise(amount = n()) %>%
ggplot(aes(x=age,y=amount,group=city,color=city)) +
geom_line() + geom_point() + thm() + coord_cartesian(xlim = c(-3, 10))
```
# 單一數值：Histogram
## `geom_histogram`
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=age, y =..count..)) +
geom_histogram()
```
## Histogram
- `aes(y=..count..)` vs. `aes(y=..density..)`
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=age, y =..density..)) +
geom_histogram()
```
## Histogram
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=age, y =..density.., fill =..count..)) + # fill 依指定欄位填色
geom_histogram(binwidth=.5)
```
## Histogram + density
- `geom_histogram()` + `geom_density()`
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=age,y=..density..)) +
geom_histogram(color="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") # alpha設定透明度
```
# Boxplot
## Boxplot
- `geom_boxplot`
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=city,y=price_unit)) +
geom_boxplot() + thm() +
labs(x = "縣市" , y = "每平方公尺價格(元)")
```
## Change `limits` of axes !
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=city,y=price_unit)) +
geom_boxplot() + thm() +
labs(x = "縣市" , y = "每平方公尺價格(元)") +
coord_cartesian(ylim = c(0, 400000)) # 設定y軸上下界線
```
## Boxplot
- 不用新增欄位，也可以直接在畫圖的同時計算！
```{r,warning=FALSE,fig.align='center', message=FALSE}
data %>%
ggplot(aes(x=city,y=log(price_unit))) +
geom_boxplot() + thm() + # geom_boxplot(outlier.shape = NA) outlier不顯示
labs(x = "縣市" , y = "log(每平方公尺價格(元))")
```
## 小挑戰
- 試著畫出高雄市在各種**不同使用分區或編定**下的屋齡分佈
- 如下圖：
```{r,echo=FALSE}
data %>%
filter(city == "高雄市") %>%
ggplot(aes(x=use_type,y=age)) +
geom_boxplot() + thm() + # geom_boxplot(outlier.shape = NA) outlier不顯示
labs(x = "use_type" , y = "age")
```
## 參考答案
```{r}
data %>%
filter(city == "高雄市") %>%
ggplot(aes(x=use_type,y=age)) +
geom_boxplot() + thm() + # geom_boxplot(outlier.shape = NA) outlier不顯示
labs(x = "use_type" , y = "age")
```
# 量化 v.s. 量化：Scatter Plot
## Scatter plot
- `geom_point`
```{r,warning=FALSE,fig.align='center', message=FALSE}
iris %>%
ggplot(aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point(shape=1, size=2) # shape控制圖示；size控制點的大小
```
## point shape types in `ggplot2`
<center>
<img src='img/point_shape_types.png' style='height: 500px' align="middle"></img></center>
## Scatter plot
- 參數放在 aes() 函數裡面，表示資料依據指定欄位內容做不同的shape/size變化
```{r,warning=FALSE,fig.align='center', message=FALSE}
iris %>%
ggplot(aes(x=Sepal.Length, y=Petal.Length, color=Species, shape = Species, size = Species)) +
geom_point() + scale_shape_manual(values=c(1,5,7)) +  # 控制 shape 顯示圖示
scale_size_manual(values=c(1,2,3))   # 控制圖示 size 顯示大小
```
## 小挑戰
- [插播ggthemr](https://github.com/cttobin/ggthemr)
- 士林區,文山區,信義區三個區域的**套房(1房1廳1衛)**在屋齡與單位尺價存在著怎樣的特性？
```{r,echo=FALSE}
library(ggthemr)
ggthemr('flat')
data %>%
filter(district == "文山區" | district == "士林區" |district == "信義區") %>%
filter(build_type == "套房(1房1廳1衛)") %>%
ggplot(aes(x=age, y=price_unit,color = district)) + geom_point(position = "jitter") +
thm()
```
## 參考答案
```{r}
library(ggthemr)
ggthemr('flat')
ans = data %>%
filter(district == "文山區" | district == "士林區" |district == "信義區") %>%
filter(build_type == "套房(1房1廳1衛)") %>%
ggplot(aes(x=age, y=price_unit,color = district)) + geom_point(position = "jitter") +
thm()
ans
```
# 進階技巧
## `stat`istics
- Fit regression line
```{r}
library(ggthemr)
ggthemr('flat')
iris %>%
ggplot(aes(x = Sepal.Length, y = Petal.Length)) +
geom_point() +
stat_smooth(method=lm, level=.95) # add se=FALSE to disable CI
```
## `facet`
- 比較各縣市在各月份下的交易量
```{r echo = TRUE,fig.height=3.2}
data %>%
group_by(city,trac_month) %>% # 選擇縣市、交易月份作為分群
summarise(total = n()) -> table # 計算分群下的總數
table %>%
ggplot(aes(x = trac_month, y = total ,fill = city))+
geom_bar(stat='identity') + thm()
```
## `facet`
```{r,fig.height=4}
table %>%
ggplot(aes(x = trac_month, y = total ,fill = city))+
geom_bar(stat='identity') + thm() +
facet_wrap( ~city , nrow = 2) +
labs(x = "交易月份" ,y="交易量")
```
## `coord`_flip()
```{r,fig.height=4}
table %>%
ggplot(aes(x = trac_month, y = total ,fill = city)) +
geom_bar(stat='identity') + thm() +facet_wrap( ~ city , nrow = 2)+
labs(x = "交易月份" ,y="交易量") + coord_flip()
```
## 圖形輸出
- 利用 RStudio UI 介面存擋
- 畫完圖之後，再存檔~~
```{r echo=TRUE,eval=FALSE}
ggsave('檔案名稱')
ggsave("plot.pdf", width = 4, height = 4)
ggsave("plot.png", width = 4, height = 4, dpi = 300)
```
# 互動式視覺化呈現
## package：`Plotly`
- Plotly是一個資料視覺化的R套件，以簡單的方式，讓資料能夠產生互動的效果。
- 提供一個合作平台，使用者能夠將自己在R中繪製的圖存上屬於自己的Plotly平台上。
- [Plotly官方網站](https://plot.ly/)
- 結合了各式各樣的API，包裝`Python`、`R`、`Malab`、...等等
>- 當然～ggplot2也能夠輕易地使用plotly轉換成互動式的圖表！！
## 套件安裝
- 直接從`CRAN`內下載
```{r echo=TRUE,eval=FALSE}
# Plotly is now on CRAN!
install.packages("plotly")
library(plotly)
ans = data %>%
filter(district == "文山區" | district == "士林區" |district == "信義區") %>%
filter(build_type == "套房(1房1廳1衛)") %>%
ggplot(aes(x=age, y=price_unit,color = district)) + geom_point(position = "jitter") +
thm()
ans
gg = ggplotly(ans)
ggp_build <- plotly_build(gg)
ggp_build$layout$width = 1400
ggp_build
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
iris
iris$Sepal.Width
iris$Sepal.Length %>% as.character()
iris$Sepal.Length %>% as.character() %>% table()
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Width)) %>%
arrange(avg)
x = group_by(iris,Species)
summarise(x,avg = mean(Sepal.Width))
View(data)
iris %>%
select(1:4)
iris %>%
select(1:4) %>%
melt(cor(use="p"))
iris %>%
select(1:4) %>%
melt(cor(., use="p"))
iris[,1:4] %>%
melt(cor(dat, use="p"))
iris[,1:4] %>%
melt(cor( use="p"))
dat <- iris[,1:4]
dat
cor <- melt(cor(dat, use="p"))
head(cor)
cor %>%
View
cor <- melt(cor(dat, use="p"))
cor %>%
head(10)
cor %>%
ggplot(aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + labs(x = "", y = "") + scale_fill_gradient2(limits=c(-1, 1))
cor %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_tile() + labs(x = "", y = "") + scale_fill_gradient2(limits=c(-1, 1))
cor %>%
ggplot(aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + labs(x = "", y = "") + scale_fill_gradient2(limits=c(-1, 1))
ggthemr('flat')
cor %>%
ggplot(aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + labs(x = "", y = "") + scale_fill_gradient2(limits=c(-1, 1))
View(dat)
View(data)
cor %>%
ggplot(aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + labs(x = "", y = "")
52*0.6
library(dplyr)
library(dygraphs)
library(ggplot2)
library(data.table)
library(devtools)
library(plotly)
library(xtable)
library(rCharts)
library(tidyr)
library(DT)
library(RColorBrewer)
library(dplyr)
library(ggthemr)
ggthemr('flat')
source("http://wush978.github.io/R/init-swirl-dev.R")
swirl
swirl()
swirl()
